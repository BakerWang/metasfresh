<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cxf="http://camel.apache.org/schema/cxf"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
	   http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
">

	<!-- we can configure the tracer by defining the tracer bean and set the 
		properties as we like -->
	<!-- the id name can be anything its the class that must be org.apache.camel.processor.interceptor.Tracer -->
	<bean
		id="camelTracer"
		class="org.apache.camel.processor.interceptor.Tracer">
		<!--property name="formatter" value="false" / -->
		<property
			name="enabled"
			value="true" />
		<!-- NOTE: Camel's logging level is a bit weird: -->
		<!-- * DEBUG, ERROR, INFO, TRACE, WARN, OFF * -->
		<!-- ANYTHING ***except*** ERROR recommended for production -->
		<property
			name="logLevel"
			value="TRACE" />
		<property
			name="logName"
			value="CAMEL-TRACE" />
		<property name="traceFilter">
			<null />
		</property>
		<property
			name="traceInterceptors"
			value="false" />
		<property
			name="traceExceptions"
			value="true" />
		<property
			name="traceOutExchanges"
			value="false" />
		<property
			name="logStackTrace"
			value="false" />
		<property
			name="useJpa"
			value="false" />
		<!-- property name="destinationUri"> <null /> </property> <property name="jpaTraceEventMessageClassName"> 
			<null /> </property> <property name="traceHandler"> <null /> </property> 
			<property name="traceInterceptorFactory"> <null /> </property -->
	</bean>

	<bean
		id="traceFormatter"
		class="org.apache.camel.processor.interceptor.DefaultTraceFormatter">
		<property
			name="breadCrumbLength"
			value="0" />
		<property
			name="nodeLength"
			value="0" />
		<property
			name="showBreadCrumb"
			value="false" />
		<property
			name="showNode"
			value="false" />
		<property
			name="showExchangeId"
			value="false" />
		<property
			name="showShortExchangeId"
			value="false" />
		<property
			name="showProperties"
			value="false" />
		<property
			name="showHeaders"
			value="false" />
		<property
			name="showBodyType"
			value="false" />
		<property
			name="showBody"
			value="false" />
		<property
			name="showOutHeaders"
			value="false" />
		<property
			name="showOutBodyType"
			value="false" />
		<property
			name="showOutBody"
			value="false" />
		<property
			name="showExchangePattern"
			value="false" />
		<property
			name="showException"
			value="true" />
		<property
			name="showRouteId"
			value="false" />
		<property
			name="maxChars"
			value="10000" />
	</bean>

	<!-- 
		Define the json provider and the server endpoint to create the cxf-rs consumer.
		Thanks to http://camel.apache.org/cxfrs.html
	-->
	<bean
		id="jsonProvider"
		class="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider" />

	<!-- notes: 
	    ${http.domain} is taken from a properties file
	    the id can be referenced in an endpoint URI
	-->
	<cxf:rsServer
		id="rsServer"
		address="http://${http.domain}/"
		serviceClass="de.metas.printing.esb.camel.inout.cxf.jaxrs.PRTRestService"
		loggingFeatureEnabled="true"
		loggingSizeLimit="20">
		<cxf:providers>
			<ref bean="jsonProvider" />
		</cxf:providers>
	</cxf:rsServer>


	<camelContext
		trace="false"
		xmlns="http://camel.apache.org/schema/spring">
		<!-- use the Java DSL route builders -->
		<packageScan>
			<package>de.metas.printing.esb.camel.inout.route</package>
			<!-- Exclude JUnit test cases, because else we will get exceptions when 
				loading routes -->
			<excludes>**.Test*</excludes>
			<excludes>**.*Test</excludes>
		</packageScan>

		<!-- jmxAgent id="agent" createConnector="true" / -->
	</camelContext>

	<!-- Data Conversion Beans -->
	<bean
		id="printerHW2AD"
		class="de.metas.printing.esb.camel.inout.bean.PRTADPrinterHWTypeBean" />
	<bean
		id="printPckg2PC"
		class="de.metas.printing.esb.camel.inout.bean.PRTCPrintPackageTypeBean" />
	<bean
		id="printPckgData2PC"
		class="de.metas.printing.esb.camel.inout.bean.PRTCPrintPackageDataTypeBean" />
	<bean
		id="printPckgResponse2AD"
		class="de.metas.printing.esb.camel.inout.bean.PRTCPrintJobInstructionsConfirmTypeBean" />
	<!-- /Data Conversion Beans -->

</beans>
